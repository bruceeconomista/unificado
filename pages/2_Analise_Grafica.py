# C√ìDIGO FINAL COM TODAS AS ETAPAS, BOT√ïES, ESTILO MODERNO E CORRE√á√ïES

import streamlit as st
import pandas as pd
from io import BytesIO
from sqlalchemy import create_engine, text
from sqlalchemy.dialects.postgresql import ARRAY
from sqlalchemy.types import String
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from unidecode import unidecode

# Importa√ß√µes para PDF
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER
from PIL import Image as PILImage # Renomeado para evitar conflito com Image do ReportLab

st.set_page_config(layout="wide", page_title="Diagn√≥stico e Oportunidades")
st.title("üìä Diagn√≥stico e Mapa de Oportunidades")

DATABASE_URL = "postgresql+psycopg2://postgres:0804Bru%21%40%23%24@localhost:5432/empresas"

# Fun√ß√µes auxiliares

def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

def buscar_dados_enriquecidos(cnpjs):
    engine = create_engine(DATABASE_URL)
    with engine.connect() as conn:
        query = text("""
            SELECT *
            FROM visao_empresa_completa
            WHERE cnpj = ANY(:cnpjs)
        """).bindparams(cnpjs=ARRAY(String))
        df = pd.read_sql(query, conn, params={"cnpjs": cnpjs})
    return df

# --- Nova Fun√ß√£o para Gerar PDF ---
def gerar_pdf_analise(df, pdf_buffer):
    doc = SimpleDocTemplate(pdf_buffer, pagesize=A4)
    styles = getSampleStyleSheet()

    # Estilo para o t√≠tulo principal
    title_style = ParagraphStyle(
        name='TitleStyle',
        parent=styles['h1'],
        fontSize=20,
        alignment=TA_CENTER,
        spaceAfter=24
    )
    # Estilo para subt√≠tulos das se√ß√µes
    section_title_style = ParagraphStyle(
        name='SectionTitleStyle',
        parent=styles['h2'],
        fontSize=16,
        spaceAfter=12,
        spaceBefore=18
    )

    story = []

    # T√≠tulo geral do PDF
    story.append(Paragraph("Diagn√≥stico Empresarial Consolidado", title_style))
    story.append(Spacer(1, 0.2 * inch))

    # Definir as abas e os t√≠tulos para o PDF
    tabs_info = [
        ("CNAE Principal", "An√°lise por CNAE Principal"),
        ("CNAE Secund√°rio", "An√°lise por CNAE Secund√°rio"),
        ("Porte", "Distribui√ß√£o por Porte da Empresa"),
        ("Localiza√ß√£o", "Distribui√ß√£o por Bairros"),
        ("Capital", "Distribui√ß√£o de Capital Social"),
        ("Idade", "Idade das Empresas"),
        ("Qualifica√ß√£o", "Qualifica√ß√£o dos S√≥cios"),
        ("Faixa Et√°ria", "Faixa Et√°ria dos S√≥cios")
    ]

    # Processar cada aba e adicionar ao PDF
    # Preparar df para gr√°ficos de capital e idade que precisam de tratamento pr√©vio
    df['capital_social'] = pd.to_numeric(df['capital_social'], errors='coerce').fillna(0)
    df['data_inicio_atividade'] = pd.to_datetime(df['data_inicio_atividade'], errors='coerce')
    hoje = pd.Timestamp.today()
    df['idade'] = (hoje - df['data_inicio_atividade']).dt.days // 365
    bins_idade = [0, 1, 2, 3, 5, 10, float('inf')]
    labels_idade = ["‚â§1", "1-2", "2-3", "3-5", "5-10", ">10"]
    df['faixa_idade'] = pd.cut(df['idade'], bins=bins_idade, labels=labels_idade)

    bins_capital = [0, 10000, 50000, 100000, 300000, 500000, 1_000_000, float('inf')]
    labels_capital = ["<10k", "10-50k", "50-100k", "100-300k", "300-500k", "500k-1M", ">1M"]
    df['faixa_capital'] = pd.cut(df['capital_social'], bins=bins_capital, labels=labels_capital)


    for i, (tab_name, section_title) in enumerate(tabs_info):
        fig = None
        # Adicionar t√≠tulo da se√ß√£o
        story.append(Paragraph(section_title, section_title_style))
        story.append(Spacer(1, 0.1 * inch))

        if tab_name == "CNAE Principal":
            top = df['cnae_principal'].value_counts().head(10).reset_index()
            top.columns = ['CNAE', 'Quantidade']
            fig = px.bar(top, x='CNAE', y='Quantidade', color='Quantidade', template='plotly_dark')
        elif tab_name == "CNAE Secund√°rio":
            sec = df['cnae_secundario'].value_counts().head(10).reset_index()
            sec.columns = ['CNAE Secund√°rio', 'Quantidade']
            fig = px.bar(sec, x='CNAE Secund√°rio', y='Quantidade', color='Quantidade', template='plotly_dark')
        elif tab_name == "Porte":
            porte = df['porte_empresa'].value_counts().reset_index()
            porte.columns = ['Porte', 'Total']
            fig = px.pie(porte, names='Porte', values='Total', hole=0.5, template='seaborn')
        elif tab_name == "Localiza√ß√£o":
            bairros = df['bairro'].value_counts()
            top_bairros = bairros.head(9)
            outros = bairros.iloc[9:].sum()
            final = pd.concat([top_bairros, pd.Series({'Outros': outros})]).reset_index()
            final.columns = ['Bairro', 'Total']
            fig = px.pie(final, names='Bairro', values='Total', title='Bairros', template='seaborn')
        elif tab_name == "Capital":
            cap = df['faixa_capital'].value_counts().sort_index().reset_index()
            cap.columns = ['Faixa de Capital', 'Quantidade']
            fig = px.bar(cap, x='Faixa de Capital', y='Quantidade', color='Quantidade', template='plotly_dark')
        elif tab_name == "Idade":
            idade = df['faixa_idade'].value_counts().sort_index().reset_index()
            idade.columns = ['Faixa de Idade', 'Quantidade']
            fig = px.bar(idade, x='Faixa de Idade', y='Quantidade', color='Quantidade', template='plotly_dark')
        elif tab_name == "Qualifica√ß√£o":
            if 'qualificacao_socio' in df.columns:
                q = df['qualificacao_socio'].value_counts().reset_index()
                q.columns = ['Qualifica√ß√£o', 'Total']
                fig = px.bar(q, x='Qualifica√ß√£o', y='Total', color='Total', template='plotly_dark')
        elif tab_name == "Faixa Et√°ria":
            if 'faixa_etaria_socio' in df.columns:
                fe = df['faixa_etaria_socio'].value_counts().reset_index()
                fe.columns = ['Faixa Et√°ria', 'Total']
                fig = px.bar(fe, x='Faixa Et√°ria', y='Total', color='Total', template='plotly_dark')
        
        if fig:
            # Salvar o gr√°fico como imagem em mem√≥ria e adicionar ao PDF
            img_buffer = BytesIO()
            fig.write_image(img_buffer, format='png', width=800, height=450, scale=2) # Aumentar a resolu√ß√£o
            img_buffer.seek(0)
            
            # Usar PIL para redimensionar se necess√°rio e ent√£o ReportLab Image
            img = PILImage.open(img_buffer)
            # Calcular a propor√ß√£o para caber na largura da p√°gina (A4 tem ~595pt de largura)
            # Definir uma largura m√°xima para a imagem (ex: 7 polegadas = 7 * 72 pts = 504 pts)
            max_width_pts = 7 * inch
            aspect_ratio = img.height / img.width
            img_width = min(img.width, max_width_pts)
            img_height = img_width * aspect_ratio
            
            # Adicionar imagem ao story
            story.append(Image(img_buffer, width=img_width, height=img_height))
            story.append(Spacer(1, 0.2 * inch)) # Espa√ßo ap√≥s cada gr√°fico
            story.append(Spacer(1, 0.2 * inch)) # Espa√ßo extra entre se√ß√µes
            if i < len(tabs_info) - 1: # Adicionar quebra de p√°gina se n√£o for o √∫ltimo gr√°fico
                # story.append(PageBreak()) # Use PageBreak para garantir nova p√°gina para cada se√ß√£o
                pass # Removido PageBreak para que fiquem um abaixo do outro conforme solicitado

    doc.build(story)

# Inicializa√ß√£o de estados
for key in ["df_cnpjs", "df_oportunidades", "df_coords", "etapa"]:
    if key not in st.session_state:
        st.session_state[key] = None

if st.session_state.etapa is None:
    st.session_state.etapa = "etapa1"



def etapa2():
    st.header("2Ô∏è‚É£ An√°lise Gr√°fica dos Dados Enriquecidos")
    df = st.session_state.df_cnpjs
    if df is None:
        st.warning("Nenhum dado carregado.")
        return

    # Certifique-se de que o DataFrame df √© tratado antes de ser usado nos gr√°ficos e no PDF
    df['capital_social'] = pd.to_numeric(df['capital_social'], errors='coerce').fillna(0)
    df['data_inicio_atividade'] = pd.to_datetime(df['data_inicio_atividade'], errors='coerce')
    
    # Pr√©-c√°lculos para faixas de idade e capital para que o PDF e as abas usem os mesmos dados
    hoje = pd.Timestamp.today()
    df['idade'] = (hoje - df['data_inicio_atividade']).dt.days // 365
    bins_idade = [0, 1, 2, 3, 5, 10, float('inf')]
    labels_idade = ["‚â§1", "1-2", "2-3", "3-5", "5-10", ">10"]
    df['faixa_idade'] = pd.cut(df['idade'], bins=bins_idade, labels=labels_idade)

    bins_capital = [0, 10000, 50000, 100000, 300000, 500000, 1_000_000, float('inf')]
    labels_capital = ["<10k", "10-50k", "50-100k", "100-300k", "300-500k", "500k-1M", ">1M"]
    df['faixa_capital'] = pd.cut(df['capital_social'], bins=bins_capital, labels=labels_capital)


    # --- Exibi√ß√£o das abas no Streamlit ---
    tabs = st.tabs(["CNAE Principal", "CNAE Secund√°rio", "Porte", "Localiza√ß√£o", "Capital", "Idade", "Qualifica√ß√£o", "Faixa Et√°ria"])

    with tabs[0]:
        top = df['cnae_principal'].value_counts().head(10).reset_index()
        top.columns = ['CNAE', 'Quantidade']
        st.plotly_chart(px.bar(top, x='CNAE', y='Quantidade', color='Quantidade', template='plotly_dark'))

    with tabs[1]:
        sec = df['cnae_secundario'].value_counts().head(10).reset_index()
        sec.columns = ['CNAE Secund√°rio', 'Quantidade']
        st.plotly_chart(px.bar(sec, x='CNAE Secund√°rio', y='Quantidade', color='Quantidade', template='plotly_dark'))

    with tabs[2]:
        porte = df['porte_empresa'].value_counts().reset_index()
        porte.columns = ['Porte', 'Total']
        fig = px.pie(porte, names='Porte', values='Total', hole=0.5, template='seaborn')
        st.plotly_chart(fig)

    with tabs[3]:
        bairros = df['bairro'].value_counts()
        top_bairros = bairros.head(9)
        outros = bairros.iloc[9:].sum()
        final = pd.concat([top_bairros, pd.Series({'Outros': outros})]).reset_index()
        final.columns = ['Bairro', 'Total']
        st.plotly_chart(px.pie(final, names='Bairro', values='Total', title='Bairros', template='seaborn'))

    with tabs[4]:
        cap = df['faixa_capital'].value_counts().sort_index().reset_index()
        cap.columns = ['Faixa de Capital', 'Quantidade']
        st.plotly_chart(px.bar(cap, x='Faixa de Capital', y='Quantidade', color='Quantidade', template='plotly_dark'))

    with tabs[5]:
        idade = df['faixa_idade'].value_counts().sort_index().reset_index()
        idade.columns = ['Faixa de Idade', 'Quantidade']
        st.plotly_chart(px.bar(idade, x='Faixa de Idade', y='Quantidade', color='Quantidade', template='plotly_dark'))

    with tabs[6]:
        if 'qualificacao_socio' in df.columns:
            q = df['qualificacao_socio'].value_counts().reset_index()
            q.columns = ['Qualifica√ß√£o', 'Total']
            st.plotly_chart(px.bar(q, x='Qualifica√ß√£o', y='Total', color='Total', template='plotly_dark'))

    with tabs[7]:
        if 'faixa_etaria_socio' in df.columns:
            fe = df['faixa_etaria_socio'].value_counts().reset_index()
            fe.columns = ['Faixa Et√°ria', 'Total']
            st.plotly_chart(px.bar(fe, x='Faixa Et√°ria', y='Total', color='Total', template='plotly_dark'))

    st.markdown("---")

    # --- Bot√£o para Exportar PDF ---
    if st.session_state.df_cnpjs is not None:
        pdf_buffer = BytesIO()
        gerar_pdf_analise(st.session_state.df_cnpjs.copy(), pdf_buffer) # Passar uma c√≥pia para evitar modifica√ß√µes indesejadas
        pdf_buffer.seek(0)
        st.download_button(
            label="Download An√°lise Gr√°fica (PDF)",
            data=pdf_buffer,
            file_name="diagnostico_empresarial_consolidado.pdf",
            mime="application/pdf"
        )

    if st.button("‚û°Ô∏è Ir para Upload de Oportunidades"):
        st.switch_page("pages/3_Upload_de_Oportunidades.py")

# ETAPA 3
# Rodar etapa
etapa2()